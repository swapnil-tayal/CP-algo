class segTree{

    vector<int> seg;
public:
    segTree(int n){
        seg.resize((4*n)+1 ,0);
    }
    void build(int ind, int low, int high, vector<int> &arr){
        if(low == high){
            seg[ind] = arr[low];
            return;
        }
        int mid = (low+high)/2;
        build(ind*2 + 1, low, mid, arr);
        build(ind*2 + 2, mid+1, high, arr);
        seg[ind] = max(seg[2*ind+1], seg[2*ind+2]);
    }

    int query(int ind, int low, int high, int l, int r){
        
        // no overlap
        if(r < low || high < l) return INT_MIN;

        // complete overlap
        if(low >= l and high <= r) return seg[ind];

        int mid = (low+high)/2;
        int left = query(2*ind + 1, low, mid, l, r);
        int right = query(2*ind + 2, mid+1, high, l, r);
        return max(left, right);
    }

    void update(int ind, int low, int high, int i, int val){
        if(low == high){
            seg[ind] = val;
            return;
        }
        int mid = (low + high)/2;
        if(i <= mid) update(2*ind+1, low, mid, i, val);
        else update(2*ind+2, mid+1, high, i, val);
        seg[ind] = min(seg[2*ind+1], seg[2*ind+2]);
    }
};
